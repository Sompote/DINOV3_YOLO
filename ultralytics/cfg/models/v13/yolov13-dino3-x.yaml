# YOLOv13x with DINOv3 backbone (Extra Large variant)
# Usage: YOLO('yolov13-dino3-x.yaml') - Maximum accuracy variant
# Parameters: ~198M | GFLOPs: ~48.2

nc: 80 # number of classes
scales:
  x: [1.00, 1.50, 512]    # Extra Large

backbone:
  # [from, repeats, module, args]
  # YOLOv13 with YOLOv3-inspired darknet backbone (Extra Large scaling)
  - [-1, 1, Conv, [32, 3, 1]]       # 0
  - [-1, 1, Conv, [64, 3, 2]]       # 1-P1/2
  - [-1, 1, Bottleneck, [64]]       # 2
  - [-1, 1, Conv, [128, 3, 2]]      # 3-P2/4
  - [-1, 2, Bottleneck, [128]]      # 4
  - [-1, 1, Conv, [256, 3, 2]]      # 5-P3/8
  - [-1, 8, Bottleneck, [256]]      # 6 (full repeats for xlarge)
  - [-1, 1, Conv, [512, 3, 2]]      # 7-P4/16
  - [-1, 8, Bottleneck, [512]]      # 8: Full processing for xlarge
  
  # DINOv3 enhancement at P4 level (512 channels -> 768 for xlarge width scaling)
  - [-1, 1, DINO3Backbone, ['dinov3_vitl16', True, 768]]  # 9: Large DINO3 with increased output for xlarge
  
  # Continue YOLOv3-style processing
  - [-1, 1, Conv, [1536, 3, 2]]     # 10-P5/32 (increased channels for xlarge)
  - [-1, 4, Bottleneck, [1536]]     # 11

head:
  # YOLOv13 head with YOLOv3-inspired structure (xlarge scaling)
  
  # P5 processing (large objects)
  - [-1, 1, Bottleneck, [1536, False]]     # 12
  - [-1, 1, Conv, [768, 1, 1]]             # 13
  - [-1, 1, Conv, [1536, 3, 1]]            # 14
  - [-1, 1, Conv, [768, 1, 1]]             # 15
  - [-1, 1, Conv, [1536, 3, 1]]            # 16 (P5/32-large)

  # P4 branch (medium objects) - uses DINO3-enhanced features
  - [-2, 1, Conv, [384, 1, 1]]             # 17
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 18
  - [[-1, 9], 1, Concat, [1]]              # 19: cat DINO3-enhanced P4 features
  - [-1, 1, Conv, [768, 1, 1]]             # 20: reduce channels
  - [-1, 1, Bottleneck, [768, False]]      # 21
  - [-1, 1, Conv, [384, 1, 1]]             # 22
  - [-1, 1, Conv, [768, 3, 1]]             # 23 (P4/16-medium)

  # P3 branch (small objects)
  - [-2, 1, Conv, [192, 1, 1]]             # 24
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]] # 25
  - [[-1, 6], 1, Concat, [1]]              # 26: cat backbone P3 features
  - [-1, 1, Conv, [384, 1, 1]]             # 27: reduce channels
  - [-1, 1, Bottleneck, [384, False]]      # 28
  - [-1, 1, Bottleneck, [384, False]]      # 29 (P3/8-small)

  # P3 -> P4 connection
  - [-1, 1, Conv, [384, 3, 2]]             # 30: Downsample P3 back to P4
  - [[-1, 23], 1, Concat, [1]]             # 31: Concat with P4
  - [-1, 1, Conv, [768, 3, 1]]             # 32: Process (final P4)

  # P4 -> P5 connection  
  - [-1, 1, Conv, [768, 3, 2]]             # 33: Downsample P4 to P5
  - [[-1, 16], 1, Concat, [1]]             # 34: Concat with P5
  - [-1, 1, Conv, [1536, 3, 1]]            # 35: Process (final P5)

  # Detection heads - P3(384ch), P4(768ch), P5(1536ch)
  - [[29, 32, 35], 1, Detect, [nc]]        # 36: Detect(P3, P4, P5)